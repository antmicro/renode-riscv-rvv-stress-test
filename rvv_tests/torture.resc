using sysbus
mach create "torture"

machine LoadPlatformDescriptionFromString
"""
cpu: CPU.RiscV32 @ sysbus
    cpuType: "rv32gcv"
    privilegeArchitecture: PrivilegeArchitecture.Priv1_10
    timeProvider: empty

dram: Memory.MappedMemory @ sysbus 0x80000000
    size: 0x06400000
"""

sysbus LoadELF $ORIGIN/test

set torture_end_hook_py 
"""
time.sleep(1)
start_addr = cpu.Bus.GetSymbolAddress("begin_signature")
end_addr = cpu.Bus.GetSymbolAddress("end_signature")

with open("/tmp/test.renode.sig", "w") as f:
  curr_addr = start_addr
  while curr_addr < end_addr:
    s = ""
    for j in range(16, 0, -1):
      s += "%02x" % cpu.Bus.ReadByte(curr_addr+j-1)
    curr_addr += 16
    f.write(s + "\n")
    cpu.Log(LogLevel.Info, "SIG> " + s)

countedOpcodes = cpu.GetAllOpcodesCounters()
missedCount = 0
opcodesCount = countedOpcodes.GetLength(0) - 1
for i in range(1, 1+opcodesCount):
  opcode = countedOpcodes[i, 0]
  count = int(countedOpcodes[i, 1])
  if count == 0:
    cpu.Log(LogLevel.Warning, 'Missed opcode: ' + opcode)
    missedCount += 1

if missedCount != 0:
  log = 'Executed binary doesn\'t contain {0} ({1:.1%}) of {2} vector instructions'.format(
    missedCount, 1.0*missedCount/opcodesCount, opcodesCount)
  cpu.Log(LogLevel.Warning, log)

emulationManager.CurrentEmulation.AddOrUpdateInBag('status', 'finished')
"""

cpu AddHook `sysbus GetSymbolAddress "test_end"` $torture_end_hook_py
cpu AddHook `sysbus GetSymbolAddress "write_tohost"` $torture_end_hook_py

cpu LogFunctionNames true
cpu MaximumBlockSize 1
cpu EnableVectorOpcodesCounting
logLevel -1
logFile $ORIGIN/renode.log
logLevel 2 console

start

# wait for the test to finish, then quit
python
"""
while not emulationManager.CurrentEmulation.TryGetFromBag[str]('status')[0]:
    time.sleep(0.1)
monitor.Parse('q')
"""

